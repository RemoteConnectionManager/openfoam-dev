#---------------------------------*- sh -*-------------------------------------
# =========                 |
# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
#  \\    /   O peration     |
#   \\  /    A nd           | Copyright (C) 2011-2015 OpenFOAM Foundation
#    \\/     M anipulation  | Copyright (C) 2015 OpenCFD Ltd.
#------------------------------------------------------------------------------
# License
#     This file is part of OpenFOAM.
#
#     OpenFOAM is free software: you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# Script
#     RunFunctions
#
# Description
#     Miscellaneous functions for running tutorial cases
#------------------------------------------------------------------------------

getNumberOfProcessors()
{
    sed -ne 's/^numberOfSubdomains\s*\(.*\);/\1/p' system/decomposeParDict
}

getApplication()
{
    sed -ne 's/^ *application\s*\([a-zA-Z]*\)\s*;.*$/\1/p' system/controlDict
}

runApplication()
{
    LOG_NAME=
    APP_RUN=
    LOG_IGNORE=false
    LOG_APPEND=false

    # Parse options and executable
    while [ $# -gt 0 ] && [ -z "$APP_RUN" ]; do
        key="$1"
        case "$key" in
            -append)
                LOG_IGNORE=true
                LOG_APPEND=true
                ;;
            -overwrite)
                LOG_IGNORE=true
                ;;
            -log)
                LOG_NAME=$2
                shift
                ;;
            *)
                APP_RUN="$key"
                APP_NAME="${key##*/}"
                ;;
        esac
        shift
    done

    LOG_NAME=${LOG_NAME:="log.$APP_NAME"}

    if [ -f $LOG_NAME ] && [ "$LOG_IGNORE" = "false" ]
    then
        echo "$APP_NAME already run on $PWD: remove log file $LOG_NAME to re-run"
    else
        echo "Running $APP_RUN on $PWD"
        if [ "$LOG_APPEND" = "true" ]; then
            $APP_RUN "$@" >> $LOG_NAME 2>&1
        else
            $APP_RUN "$@" > $LOG_NAME 2>&1
        fi
    fi
}

runParallel()
{
    LOG_NAME=
    APP_RUN=
    LOG_IGNORE=false
    LOG_APPEND=false

    # Parse options and executable
    while [ $# -gt 0 ] && [ -z "$APP_RUN" ]; do
        key="$1"
        case "$key" in
            -append)
                LOG_IGNORE=true
                LOG_APPEND=true
                ;;
            -overwrite)
                LOG_IGNORE=true
                ;;
            -log)
                LOG_NAME=$2
                shift
                ;;
            *)
                APP_RUN="$key"
                APP_NAME="${key##*/}"
                # also read number of processors
                nProcs="$2"
                shift
                ;;
        esac
    shift
    done

    LOG_NAME=${LOG_NAME:="log.$APP_NAME"}

    if [ -f $LOG_NAME ] && [ "$LOG_IGNORE" = "false" ]
    then
        echo "$APP_NAME already run on $PWD: remove log file $LOG_NAME to re-run"
    else
        echo "Running $APP_RUN in parallel on $PWD using $nProcs processes"
        if [ "$LOG_APPEND" = "true" ]; then
            ( mpirun -np $nProcs $APP_RUN -parallel "$@" < /dev/null >> $LOG_NAME 2>&1 )
        else
            ( mpirun -np $nProcs $APP_RUN -parallel "$@" < /dev/null > $LOG_NAME 2>&1 )
        fi
    fi
}

compileApplication()
{
    echo "Compiling $1 application"
    wmake $1
}

cloneCase()
{
    if [ -d $2 ]
    then
        echo "Case already cloned: remove case directory $2 to clone"
    else
        echo "Cloning $2 case from $1"
        mkdir $2
        cpfiles="0 system constant"
        for f in $cpfiles
        do
            cp -r $1/$f $2
        done
    fi
}

#------------------------------------------------------------------------------
